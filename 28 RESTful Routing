001 Intro to REST
- Just a convention of how we name the route 
In other words, it's a pattern that we should follow when define (or name) the route
- There are total 7 RESTful routes

002 RESTful Blog App INDEX
- Create project, install all stuff needed
- Include body-parser, express, mongoose
- 4 steps with mongoose to setup things: require, connect, schema, compile to model
- 3 steps must-have for most of project:
  + app.set('view engine', 'ejs');
  + app.use(express.static('public')); -> tell express where we store static content like html, css, js
  + app.use(bodyParser.urlencoded({extended: true}));
- our blog model contains : title, image, body, created (date)
-> all are strings, except created -> created : {type: Date, default: Date.now}
-> we can set default for other attributes as well if needed

- Main : Set INDEX route : app.get('/blog', callback);
-> What we need here is get all the blogs from db by .find({}, allBlogs)
-> then if we get the arrays of all blogs from db -> we render to index.ejs with these data

003 Blog App Layout
- Add header and footer partials
- Semantic UI: just like bootstrap : we can include it locally or use cdn link
<div class="ui fixed inverted menu">  === <div class="navbar navbar-inverse">
  <div class="ui container">          === <div class="container">
      <div class="header item><i class="code icon"></i>Blog Site</div>      === <div class="navbar-brand">
      <a href="/" class="item"> Home</a>
      <a href="/blogs/new" class="item"> New Post </a>    
  </div>
</div>

NOTICE: We can use customized css file to change style of all predefined class  

004 RESTful Blog App NEW and CREATE

  <div class="ui main text container segment"> 
      <div class="ui huge header">New Blog</div>
      <form class="ui form" action="/posts" method="POST">
        <div class="field">
          <input type=text name="post[title]" placeholder="title">				
        </div>			
        <input type="submit" class="ui basic purple button" value="SUBMIT">					
      </form>
    </div>
    
    -> the way UI Semantic name their class is more meaningful than Bootstrap

005 RESTful Blog App SHOW

<%= VS <%-: the latter consiter also html tag inside it and the first one dont
More deeply, the first one push all tags to buffer and dont print them to browser

<div class="ui segment container main"> 
		<div class="ui huge header centered"><%= post.title %></div>
		<div class="ui top attached">
			<div class="item">
				<img class="ui centered rounded image" src="<%= post.image %>" width="500" height="250" >
				<div class="content">
					<span><%= post.created.toDateString()%></span>
				</div>
				
				<div class="description">
					<p><%= post.content%></p>
				</div>
			
			</div>
		</div>
	
	</div>

006 RESTful Blog App EDIT and UPDATE
-> EDIT ROUTE : 
+ app.get('/posts/edit', ...) -> get the form with the data pre-filled 

Problem arises because HTML doesn't support PUT request so even when we specify our form
to be sent as a PUT request, browser treat as a POST request instead
-> Question : Why don't we just use the POST request and change the route
Answer: We want to follow the convetion of RESTful ROUTE
-> Solution to this problem : In client we add a parameter to the action like
action = "/posts/<%=post._id%>?method=PUT" method="POST"
In server side, we use module : method-override 
app.use('methodOverride('_method')); -> This means we want to override the method in form with whatever we specify _method in the params

+ app.put('/posts', ...);
-> UPDATE ROUTE
This route is responsible for finding the matching post and update it
We'll use method findByIdAndUpdate that provided by model Post
This method takes in 3 parameters which are 
+ id : req.params.id
+ new Post
+ callback with 2 parameters which are : err and updatedPost

007 RESTful Blog App DESTROY
- Very similar to EDIT AND UPDATE ROUTE
- In client side , at show page , we have a form that method="POST"
action="/posts/<%=post._id%>?_method=DELETE
- We want to server side overwrite the POST method by the DELETE method in params which is passed in
- Also, We have a route in server side that process this 
app.delete('/posts/:id', ...)
-> Here we'll use the method findByIdAndRemove that is provided by Post model
This method just takes in 2 args
+ id
+ callback with only one arg which is err

008 RESTful Blog App Final Touches

- Sanitize blog body: Avoid injecting script tag to the content of post
var expressSanitizer = require('expressSanitizer');
app.use(expressSanitizer()); -> IMPORTANT NOTICE: This is must be after bodyParser

- To filter the content from POST request: 
we use function : req.sanitize() -> pass in the content we want to filter and
assign back to it

-> We apply sanitize() for Create and Update route


