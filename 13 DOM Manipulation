001 Intro to DOM
  -> Combine JS and HTML+CSS: JS interact with HTML , make things interactive
  - Why you should care:  games, form validations, animation ...
  -> to sum up: interactivity  
  
002 Defining DOM
  - Document Object Model
  - interface between JS and HTML+CSS
  - How DOM is contructed: 
    + browser turns every HTML tag into Javascript object that we can manipulate
    + everything is stored inside of the document object
  - how to see it ? in console, type document
  then console.dir(document)

003 SELECT and MANIPULATE
  - choose something and make it do something
  var h1 = document.querySelector("h1"); -> select
  h1.style.color = "pink" -> manipulate
  
  - very fun example to illustrate power of DOM
  change background of body after 1 second 
  remember how ? setInterval() function takes 2 argument
  one is anonymous function and second is time in miliseconds between each call

004 Important Selector Methods
  - document.somthing : document.body, document.head
  - Methods : 
  + document.getElementById() -> one id only occur only one time per page
  + document.getElementsByClassName() -> notice 's' -> return a list (not array?!?) even one element
  -> can access by [index], but we can't use forEach because it's not array???
  -> each element in the list returned is a object
  
  + document.getElementsByTagName()-> same above, take in a tag name
  
  + document.querySelector() -> css-style selector, only gives us first instance that it encounters
  -> very important to note -> return a object (ONLY ONE)
  Argument something like ".bold", "#special", "li a.special"
  When to use ? Example case : when we want to select body 
  + in case of getElementByTagName , it returns a list -> have to access element
  + with this method, we right away get the object
  
  + document.querySelectorAll() -> works same as querySelector (CSS-style selector) but return a all result it find in a list
  each element again is a object
  
005 Manipulating Style (few from many ways)
-> Objectives:
  - changing an element'style
  - adding/removing classes
  - changing content of a tag
  - changing attributes (src, href, etc..)
  
-> Style: is a way to manipulate an element's style, actually style is a property of DOM object, that contains many other other properties
like : color , border , fontSize , background, marginTop

Idea? When to change style ? When we want interactivity between user and browser ? User do something on the page 
(answer a question for example ?!?) -> then immediately something happens corresponding to that event withour interact with server
-> In those cases -> we use JS to interact with objects in DOM 

How ? 
+ Simple way : just document.tagSomething.style.color = "red" for example -> we can call this way is DIRECT CHANGING
-> Problem with this way : if we have to make 100 changes that is the same to each other? how to reduce work ?
+ we may want seperate work ? We may want predifine classes that define style for particular element
-> then we use JS to set class for elements that we want changing
-> with this way , we will reduce overlap between JS , CSS , HTML -> Best way

Implement? 
tag = document.querySelector("h1");
tag.classList.add("another-class") -> actually classList is not an array , it's a list (:)))
            .remove
            .toggle -> turn on if off, turn off if on -> simple but very useful

006 Manipulate Text and Content
  - textContent -> return a string of all text contained in a given element
  -> Just extract ONLY text, not including all tags inside
  -> We CAN reset content by assign another string value . BUT carefully because it change the structure of html
  
  - innerHTML -> including all tags inside current element -> Same problem when changing as above
  
  ANOTHER IMPORTANT between 2 of these:
  Imagine we reset the content in 2 above cases, and we want change by something like 
  <h1> THIS WILL BE RENDERED </h1>
  GUESS what happen? with textContent the everything is printed in plain text (including tags)
  on the other hand, with innerHTML the string is treated as html tags and render a h1 heading 
  
007 Manipulating Attributes
  - something like : href, src ... -> inside quotes
  ... link.getAttribute("href") -> select link of of a anchor tag
      link.setAttribute("href", "www.google.com") -> change the attribute of a anchor tag

007 Playing with GOOGLE code along
  - We can using a loop to change all elements
  REMEMBER document.getElementsBy... -> return a list NOT A ARRAY
  SO we can't use forEach 
  Instead we can use for or while traditionally




