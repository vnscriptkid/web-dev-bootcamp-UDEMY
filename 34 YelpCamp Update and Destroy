001 Intro to YelpCamp new Features
  - flash message : you see it one time not always (after successful registration)
  - option to edit and delete a campground (just owner can do these things)
002 Campground Edit and Update
  - need some new routes: 
    + campgrounds/:id/edit  using GET method -> show the edit form (EDIT)
    + campgrounds/:id       using PUT method -> making the changes in db (UPDATE)
  - To use these ROUTES , we must install method-override method in app.js
  var methodOverride = require('method-override');
  app.use(methodOverride('_method')); 
  Remember: Client can't use methods like PUT so there must be a mechanism that finally the method is changed to PUT
  So we add a params _method=something to the request. So method-override will change the method of request to whatever something
  is equal to , before sending to route for processing
  
  + The first route render a form that similar to creating a new camp but with data is filled
  we must findById with id from params to check if id is existed. if yes we generate a form 
  otherwise, just redirect to /campgrounds (camp/index.ejs)
  
  + The second route is responsible for updating from database.
  Rather than findById then Update we can just simply findByIdAndUpdate()
  with 3 params
    + first: id from param -> req.params.id
    + second: the updated camp (that we take from form)
    + third is callback
    
    => Now , everything seems done but Anyone is able to update the camp
    What we want is just the owner of camp has the right to edit and delete camp
  
003 Campground Destroy
- The logic is quite the same as UPDATE
- In show camp page, we add a form that method=POST and action="campgrounds/<%=camp._id%>?_method=DELETE"
- In the camp ROUTES , we add a route that process the coressponding actions above
This route uses delele method like : router.delete()
- We use a combination function : findByIdAndDelete
-> This function just take id from params and a call back
-> Either if the error occurs or not, both cases we redirect to the index page

004 Campground Authorization Part 1
- Who you are ? And What you can do? or what is your permissions?
- First, we want only people is authenticated AND who is the owner of a camp:  
  + edit (show form edit)
  + update (actually make changes in the db)
  + delete (delete from database)
-> How we do it? We make a middleware rather than put all the checking stuff in routes though we can do it
-> But our purpose here is Readable Code and Dont repeat your self

We create a function , which is a middleware, this guy then is pass as a second parameters of routes that 
we want to check. Actually this guy check if req is meets our condition then we call next() means we jump into
the callback, else we can redirect somewhere

+ First we check if user is logged in (by req.isAuthenticated())
if already logged in , we jump to check 2
else we redirect('back')
+ If first condition is satified , we do next check , which is if the current user is owner of particular campground
if yes, we call next() function , that means we go to the callback
else , we redirect('back')

-> finally, we edit the template such that update and delete features only is available with user who is authenticated
and has owner of that camp

005 Campground Authorization Part 2

006 Comment Edit and Update

007 Comment Destroy

008 Comment Authorization

009 Refactoring Middleware
- Create a new folder 'middleware' with file 'index.js' inside 
-> Why we need file name 'index.js' -> so when include to another file we just specify folder name -> it will automatically 
understand index.js is the main file of that module
- We store all middleware stuff in here and exports as a module for others can use
- There are 3 ways to export: (in essence , they are the same) we define a object and export it out
  1. middlewareObj = {}
    middlewareObj.checkCampOwnership = function(){}
    middlewareObj.checkCommentOwnership = function(){}
    module.exports = middlewareObj;
    
  2. middlewareObj = {
    checkCampOwnership: function(){},
    checkCommentOwnership: function(){}
  }
  module.exports = middlewareObj;
  
  3. module.exports = {};
  
  -> Why we need seperated file for middleware? readable code, break the problems down to smaller problems (each file just responsible
  for a purpose), avoiding repeating code (every routes we have to define middleware if we want to use it)












